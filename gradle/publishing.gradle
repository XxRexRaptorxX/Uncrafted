// ========================================
// PUBLISHING TASKS
// ========================================

tasks.register("#publishNewVersion") {
    group = "publishing"
    description = "Publish to both Modrinth and CurseForge"

    dependsOn "build", "modrinth", "publishCurseForge"

    doFirst { updateVersionJson() }

    doLast {
        println "=== Publish Completed ==="
        println "Mod Version: ${mod_version}"
        println "Minecraft Version: ${minecraft_version}"
        println "Published to Modrinth and CurseForge"
        println "Updated versions.json with current version"
    }
}

tasks.register("#publishModrinthOnly") {
    group = "publishing"
    description = "Publish only to Modrinth"

    dependsOn "build", "publishCurseForge", "updateVersionFile"

    doLast {
        println "=== Modrinth Publish Completed ==="
        println "Mod Version: ${mod_version}"
        println "Published to Modrinth only"
        println "Updated versions.json with current version"
    }
}

tasks.register("#publishCurseForgeOnly") {
    group = "publishing"
    description = "Publish only to CurseForge"

    dependsOn "build", "publishCurseForge", "updateVersionFile"

    doLast {
        println "=== CurseForge Publish Completed ==="
        println "Mod Version: ${mod_version}"
        println "Published to CurseForge only"
        println "Updated versions.json with current version"
    }
}

tasks.register("#dryRunPublish") {
    group = "publishing"
    description = "Dry run - shows what would be published without actually publishing"

    doLast {
        println "=== DRY RUN - PUBLISH PREVIEW ==="
        println "Mod ID: ${mod_id}"
        println "Mod Name: ${mod_name}"
        println "Mod Version: ${mod_version}"
        println "Minecraft Version: ${minecraft_version}"
        println "Release Type: ${release_type}"
        println "Game Versions: ${project.findProperty("game_versions")}"
        println ""
        println "Modrinth Project ID: ${mr_id}"
        println "CurseForge Project ID: ${project.findProperty("cf_id")}"
        println ""
        println "JAR File: ${jar.archiveFileName.get()}"
        println "JAR Path: ${jar.destinationDirectory.get()}/${jar.archiveFileName.get()}"
        println ""

        def changelogContent = generateLatestChangelog()
        println "Changelog Preview:"
        println "==================="
        println changelogContent.take(500) + (changelogContent.length() > 500 ? "..." : "")
        println "==================="
        println ""

        println "versions.json changes that would be made:"
        def currentVersion = mod_version
        def currentMcVersion = minecraft_version
        println "  ${currentMcVersion}-latest: ${currentVersion}"
        println "  ${currentMcVersion}-recommended: ${currentVersion}"
        println ""

        println "Environment Variables:"
        println "MODRINTH_TOKEN: ${System.getenv("MODRINTH_TOKEN") ? 'SET' : 'NOT SET'}"
        println "CURSEFORGE_TOKEN: ${System.getenv("CURSEFORGE_TOKEN") ? 'SET' : 'NOT SET'}"
    }
}

ext.validateTokens = {
    def modrinthToken = System.getenv("MODRINTH_TOKEN") ?: project.findProperty("modrinthToken")?.toString()
    def cfToken = System.getenv("CURSEFORGE_TOKEN") ?: project.findProperty("curseforgeToken")?.toString()

    if (modrinthToken == null) {
        throw new GradleException("Missing MODRINTH_TOKEN: set it either as ENV (MODRINTH_TOKEN) or in ~/.gradle/gradle.properties (modrinthToken)")
    }

    if (cfToken == null) {
        throw new GradleException("Missing CURSEFORGE_TOKEN: set it either as ENV (CURSEFORGE_TOKEN) or in ~/.gradle/gradle.properties (curseforgeToken)")
    }

    return [modrinthToken, cfToken]
}