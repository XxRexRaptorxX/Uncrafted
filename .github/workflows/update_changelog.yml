name: Generate Changelog

on:
  push:
    branches: [ '**' ]

permissions:
  contents: write

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g conventional-changelog-cli
          npm install -g conventional-changelog-conventionalcommits

      - name: Read gradle.properties
        id: gradle_props
        run: |
          if [ -f "gradle.properties" ]; then
            mod_version=$(grep '^mod_version=' gradle.properties | cut -d'=' -f2 | tr -d ' ')
            game_versions=$(grep '^game_versions=' gradle.properties | cut -d'=' -f2 | tr -d ' ')
            echo "mod_version=$mod_version" >> $GITHUB_OUTPUT
            echo "game_versions=$game_versions" >> $GITHUB_OUTPUT
          else
            echo "gradle.properties not found"
            exit 1
          fi

      - name: Create changelog configuration
        run: |
          cat > .changelogrc.js << 'EOF'
          const config = {
            writerOpts: {
              // Gruppen bleiben nach Commit-Type erhalten, aber es gibt keine benutzerdefinierte Sortierung mehr.
              groupBy: "type"
            },
            preset: {
              name: "conventionalcommits",
              types: [
                {
                  type: "feat",
                  section: "Features"
                },
                {
                  type: "feature",
                  section: "Features"
                },
                {
                  type: "fix",
                  section: "Bug Fixes"
                },
                {
                  type: "perf",
                  section: "Performance Improvements"
                },
                {
                  type: "revert",
                  section: "Reverts"
                },
                {
                  type: "docs",
                  section: "Documentation"
                },
                {
                  type: "style",
                  section: "Styles"
                },
                {
                  type: "chore",
                  section: "Miscellaneous Chores"
                },
                {
                  type: "refactor",
                  section: "Code Refactoring"
                },
                {
                  type: "test",
                  section: "Tests"
                },
                {
                  type: "build",
                  section: "Build System"
                },
                {
                  type: "ci",
                  section: "Continuous Integration"
                }
              ]
            }
          };
          
          module.exports = config;
          EOF

      - name: Check if version exists in CHANGELOG.md
        id: version_check
        run: |
          # Build a sanitized single-line version header. Note the TWO spaces before "for" as requested.
          version_header=$(printf "v.${{ steps.gradle_props.outputs.mod_version }}  for MC ${{ steps.gradle_props.outputs.game_versions }}" | tr -d '\r\n')
          
          # Default to not existing
          version_exists=false

          # If CHANGELOG.md exists, check for a single-line match first
          if [ -f "CHANGELOG.md" ] && grep -q "## $version_header" CHANGELOG.md; then
            version_exists=true
          else
            # Also accept the case where the existing changelog has a multi-line header:
            # a line starting with "## " that contains the version and the next line contains the "for MC ..." part.
            if [ -f "CHANGELOG.md" ]; then
              if awk -v mv="v.${{ steps.gradle_props.outputs.mod_version }}" -v gv="for MC ${{ steps.gradle_props.outputs.game_versions }}" '
                   BEGIN { found=0 }
                   /^## / {
                     if (index($0, mv)) {
                       if (getline > 0) {
                         if (index($0, gv)) { found=1; exit }
                       }
                     }
                   }
                   END { exit(!found) }
                   ' CHANGELOG.md; then
                version_exists=true
              fi
            fi
          fi

          printf 'version_exists=%s\n' "$version_exists" >> $GITHUB_OUTPUT
          printf 'version_header=%s\n' "$version_header" >> $GITHUB_OUTPUT

      - name: Generate temporary changelog
        run: |
          # Get the latest commit hash to generate changelog from all commits since last tag
          # If no tags exist, generate from all commits
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            # Current commit is tagged, generate changelog for this tag
            conventional-changelog -p conventionalcommits -r 1 --config .changelogrc.js > temp_changelog.md
          elif git describe --tags --abbrev=0 2>/dev/null; then
            # Tags exist but current commit is not tagged, generate since last tag
            LAST_TAG=$(git describe --tags --abbrev=0)
            conventional-changelog -p conventionalcommits --config .changelogrc.js --commit-path . --pkg '{"version":"${{ steps.gradle_props.outputs.mod_version }}"}' --from $LAST_TAG > temp_changelog.md
          else
            # No tags exist, generate from all commits
            conventional-changelog -p conventionalcommits --config .changelogrc.js --commit-path . --pkg '{"version":"${{ steps.gradle_props.outputs.mod_version }}"}' --from '' > temp_changelog.md
          fi

      - name: Process changelog content
        run: |
          # Check if changelog was generated and has content
          if [ -s temp_changelog.md ]; then
            # Remove version header if it exists (starts with ##)
            # Some changelogs emit a multi-line header:
            # ## vX.Y.Z
            #  for MC ...
            # We remove the first header line and any immediately following continuation lines
            if head -1 temp_changelog.md | grep -q "^## "; then
              # remove the first header line
              tail -n +2 temp_changelog.md > temp_content.md
              # drop any immediately following lines that are blank or start with whitespace (these are header continuations)
              awk 'BEGIN{skip=1} {
                if (skip) {
                  if ($0 ~ /^[[:space:]]*$/) next;
                  else if ($0 ~ /^[[:space:]]/) next;
                  else { skip=0; print; }
                } else { print }
              }' temp_content.md > processed_content.md
            else
              cp temp_changelog.md processed_content.md
            fi
          
            # Remove empty lines at the beginning (just in case)
            sed -i '1{/^[[:space:]]*$/d;}' processed_content.md || true
          else
            # No commits found, create empty content
            echo "" > processed_content.md
          fi

      - name: Debug output
        run: |
          echo "=== Debug Information ==="
          echo "Repository status:"
          git status
          echo ""
          echo "Recent commits:"
          git log --oneline -5
          echo ""
          echo "Tags:"
          git tag -l
          echo ""
          echo "Temp changelog content:"
          if [ -f temp_changelog.md ]; then
            echo "--- temp_changelog.md ---"
            cat temp_changelog.md
          else
            echo "temp_changelog.md does not exist"
          fi
          echo ""
          echo "Processed content:"
          if [ -f processed_content.md ]; then
            echo "--- processed_content.md ---"
            cat processed_content.md
          else
            echo "processed_content.md does not exist"
          fi

      - name: Update LATEST_CHANGELOG.md
        run: |
          version_header="## ${{ steps.version_check.outputs.version_header }}"
          
          # Write header as a single line
          printf '%s\n' "$version_header" > LATEST_CHANGELOG.md
          
          # Add processed content if it exists and is not empty
          if [ -s processed_content.md ]; then
            cat processed_content.md >> LATEST_CHANGELOG.md
          else
            echo "No notable changes." >> LATEST_CHANGELOG.md
          fi

      - name: Update CHANGELOG.md
        run: |
          version_header="## ${{ steps.version_check.outputs.version_header }}"
          
          if [ "${{ steps.version_check.outputs.version_exists }}" = "true" ]; then
            # Version exists - merge new commits into existing version
            if [ -s processed_content.md ]; then
              # Replace the existing version block (if present) by inserting new content right after the version header
              # Simple approach: prepend our new block, then remove the old version block (first occurrence) to avoid duplicates.
              # Prepend new block to beginning (we'll then remove the older block)
              {
                echo "$version_header"
                echo ""
                cat processed_content.md
                echo ""
                # then append the whole current changelog (we'll remove the old block below)
                cat CHANGELOG.md
              } > temp_changelog_full.md

              # Remove the old (first) occurrence of that version block from temp_changelog_full.md
              # This searches for a header line that contains the module version and deletes from that header until the next '## ' header.
              MOD_VER="v.${{ steps.gradle_props.outputs.mod_version }}"

              awk -v mv="$MOD_VER" '
                BEGIN { in_block=0; block_removed=0 }
                /^## / {
                  if (!block_removed && index($0, mv)) {
                    # start skipping this old block
                    in_block=1
                    next
                  }
                }
                /^## / && in_block {
                  # reached next header -> stop skipping and print this header
                  in_block=0
                }
                {
                  if (!in_block) print
                }
                ' temp_changelog_full.md > temp_changelog_final.md && mv temp_changelog_final.md CHANGELOG.md || mv temp_changelog_full.md CHANGELOG.md
            fi
          else
            # Version doesn't exist - add new version at the top
            if [ -f "CHANGELOG.md" ]; then
              # Prepend new version to existing changelog
              {
                echo "$version_header"
                echo ""
                if [ -s processed_content.md ]; then
                  cat processed_content.md
                else
                  echo "No notable changes."
                fi
                echo ""
                cat CHANGELOG.md
              } > temp_changelog_full.md && mv temp_changelog_full.md CHANGELOG.md
            else
              # Create new CHANGELOG.md
              echo "# Changelog" > CHANGELOG.md
              echo "" >> CHANGELOG.md
              echo "$version_header" >> CHANGELOG.md
              echo "" >> CHANGELOG.md
              if [ -s processed_content.md ]; then
                cat processed_content.md >> CHANGELOG.md
              else
                echo "No notable changes." >> CHANGELOG.md
              fi
            fi
          fi

      - name: Clean up temporary files
        run: |
          rm -f temp_changelog.md temp_content.md processed_content.md .changelogrc.js temp_changelog_full.md temp_changelog_final.md

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Stage the files (if they exist)
          git add CHANGELOG.md LATEST_CHANGELOG.md || true

          # If there are staged changes, commit
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update changelog for v.${{ steps.gradle_props.outputs.mod_version }}"
            git push
          fi